
--Makes buildings
function createBuildings(region)
   local blocktype = {
     [1] = ref_regionData.smallBlock,
     [2] = ref_regionData.medBlock,
     [3] = ref_regionData.smallBlock,
     [4] = ref_regionData.medBlock,
     [5] = ref_regionData.largeBlock
   }
   local blockRand = math.random(1,randMax)
local buildingParams = {
    type='Custom_Assetbundle',
    position= {x=0,y=100,z=0},
    scale= {x=1,y=1,z=1},
    rotation = {x=0, y=0, z=0},
    sound = false,
     snapToGrid = false,
}
local buildingArtParams = {
    assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/urban_buildings.unity3d?raw=true',
    assetbundle_secondary = nil,
    type = 1, --[[ figurine --]]
    material = 2, --[[ metal --]]
}
local building = spawnObject(buildingParams)
building.setCustomObject(buildingArtParams)

for i, data in ipairs(blocktype[blockRand]) do
       --Sets up reference function
       --Sets up label
       --Creates button and counts it
--local scaledSize = data.size
local scaledPos = Vector(data.pos)
local scaledPosX = data.pos[1]
local scaledPosZ = data.pos[3]
local tileOffset = self.getPosition()
local tileRotation = self.getRotation()
local buildingRotation = data.rot
local boardFlipper = vector(1,1,-1)
if tileRotation == vector(0,90,0) then
scaledPos[1] = scaledPosZ
scaledPos[3] = -scaledPosX
boardFlipper = vector(-1,1,1)
buildingRotation = buildingRotation + 90
end
if tileRotation == vector(0,180,0) then
scaledPos[1] = -scaledPosX
scaledPos[3] = -scaledPosZ
boardFlipper = vector(-1,1,1)
buildingRotation = buildingRotation + 180
end
if tileRotation == vector(0,270,0) then
scaledPos[1] = -scaledPosZ
scaledPos[3] = scaledPosX
boardFlipper = vector(-1,1,1)
buildingRotation = buildingRotation + 270
end


scaledPos:scale(vector(incher,0,incher))
scaledPos = scaledPos + tileOffset

      local cloneBuilding = building.clone()
      cloneBuilding.setPosition(scaledPos)
      cloneBuilding.setRotation(vector(0,buildingRotation,0))
      local buildRandMin = data.minRange
      local buildRandMax = data.maxRange
      local buildRand = math.random(buildRandMin,buildRandMax)

      cloneBuilding.AssetBundle.playLoopingEffect(buildRand)
--[[      local color = getRandomColor()

          -- Apply the color to object
       cloneBuilding.setColorTint(color) --]]
       spawnedBuildingCount = spawnedBuildingCount + 1
       self.addAttachment(cloneBuilding)
   end
      building.destruct()
end


function getRandomColor()
    local buildingColorTable = {
      [1] = {r=0.6,g=0.25,b=0.25},
      [2] = {r=0.67,g=0.61,b=0.49},
      [3] = {r=0.6,g=0.6,b=0.6},
      [4] = {r=0.55,g=0.688,b=0.723}
    }

    local r = math.random(1,4)
    return Color(buildingColorTable[r])
end
