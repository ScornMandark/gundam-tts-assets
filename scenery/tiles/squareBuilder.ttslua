--Lua beyond this point, I recommend doing something more fun with your life



--Save function
function updateSave()
   saved_data = JSON.encode(ref_regionData)
   if disableSave==true then saved_data="" end
   self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
   local ref_regionData = defaultRegionData
   spawnedBuildingCount = 0

   local bigRegion = math.random(1,10)
   if centerOpen == true and bigRegion >7 then
        createBuildings(ref_regionData,0)
    else
      createBuildings(ref_regionData,1)
      createBuildings(ref_regionData,2)
      createBuildings(ref_regionData,3)
      createBuildings(ref_regionData,4)
   end
end

--Building creation

--Makes buildings
function createBuildings(ref_regionData,quarter)
   local blocktype = {
     [1] = ref_regionData.smallQuarter1,
     [2] = ref_regionData.smallQuarter2,
     [3] = ref_regionData.smallQuarter3,
     [4] = ref_regionData.smallQuarter4,
     [5] = ref_regionData.medQuarter1,
     [6] = ref_regionData.medQuarter2,
     [7] = ref_regionData.largeBlock
   }
   local blockRand = 1
   if quarter == 0 then
     blockRand = 7
    else
     blockRand = math.random(1,6)
    end
    local buildingParams = {
        type='Custom_Assetbundle',
        position= {x=0,y=100,z=0},
        scale= {x=1,y=1,z=1},
        rotation = {x=0, y=0, z=0},
        sound = false,
         snapToGrid = false,
    }
    local buildingArtParams = {
        assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/urban_buildings.unity3d?raw=true',
        assetbundle_secondary = nil,
        type = 1, --[[ figurine --]]
        material = 2, --[[ metal --]]
    }
    local building = spawnObject(buildingParams)
    building.setCustomObject(buildingArtParams)

    for i, data in ipairs(blocktype[blockRand]) do
           --Sets up reference function
           --Sets up label
           --Creates button and counts it
    --local scaledSize = data.size
    local scaledPos = Vector(data.pos)
--    local scaledPosX = data.pos[1]
--    local scaledPosZ = data.pos[3]
    local tileOffset = self.getPosition()
    local tileRotation = self.getRotation()
    local buildingRotation = data.rot
     if quarter == 2 or quarter == 3 then    --flip locations around for different quarters - quarter 1 default, -x -y
        scaledPos[1] = scaledPos[1] + quarterShiftX
    end
     if quarter == 4 or quarter == 3 then
        scaledPos[3] = scaledPos[3] + quarterShiftZ
    end
    if quarter == 0 then
        buildingRotation = buildingRotation + math.random(0,3)*90   -- for massive tile, random orientation
    end
--[[
   if tileRotation == vector(0,90,0) then
    scaledPos[1] = scaledPos[3]
    scaledPos[3] = -scaledPos[1]
    buildingRotation = buildingRotation + 90
    end
    if tileRotation == vector(0,180,0) then
    scaledPos[1] = -scaledPos[1]
    scaledPos[3] = -scaledPos[3]
    buildingRotation = buildingRotation + 180
    end
    if tileRotation == vector(0,270,0) then
    scaledPos[1] = -scaledPos[3]
    scaledPos[3] = scaledPos[1]
    buildingRotation = buildingRotation + 270
    end
--]]

    scaledPos:scale(vector(incher,0,incher))
    scaledPos = scaledPos + tileOffset

      local cloneBuilding = building.clone()
      cloneBuilding.setPosition(scaledPos)
      cloneBuilding.setRotation(vector(0,buildingRotation,0))
      local buildRandMin = data.minRange
      local buildRandMax = data.maxRange
      local buildRand = math.random(buildRandMin,buildRandMax)

      cloneBuilding.AssetBundle.playLoopingEffect(buildRand)
--[[      local color = getRandomColor()

          -- Apply the color to object
       cloneBuilding.setColorTint(color) --]]
       spawnedBuildingCount = spawnedBuildingCount + 1
       cloneBuilding.locked = true
       cloneBuilding.addTag('building')
       self.jointTo(cloneBuilding, {
            ["type"]        = "Fixed",
            ["collision"]   = true,
            ["break_force"]  = 1000.0,
            ["break_torgue"] = 1000.0,
        })
   end
      building.destruct()
end


function getRandomColor()
    local buildingColorTable = {
      [1] = {r=0.6,g=0.25,b=0.25},
      [2] = {r=0.67,g=0.61,b=0.49},
      [3] = {r=0.6,g=0.6,b=0.6},
      [4] = {r=0.55,g=0.688,b=0.723}
    }

    local r = math.random(1,4)
    return Color(buildingColorTable[r])
end
