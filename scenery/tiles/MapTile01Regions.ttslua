--[[ Primary Upper area (162 x 198 scale feet)
image is 2048 x 4096
center is 1024,2048

px UL 449,449 -> -575,-1599 ->-0.2876, -0.7808 -> -9",25"
chara checker -> -0.75, -2.075
px LR 1600,1856 -> 575,-192 -> 0.2876, 0.09375 -> 9",3"
chara checker -> 0.75, -0.25

13.5" x 16.5", +/- 6.75", 2.25" - 18.75"
--]]
 --[[   based on Character Sheet Template    by: MrStump

Step 3) Save and check script changes
   -Hit Save & Apply in the script window to save your code
   -You can edit your code as needed and Save+Apply as often as needed
   -When you are finished, make disableSave = false below then Save+apply
       -This enables saving, so your sheet will remember whats on it.

Bonus) Finding/Editing Positions for elements
   I have included a tool to get positions for buttons in {x,y,z} form
   Place it where you want the center of your element to be
   Then copy the table from the notes (lower right of screen)
       You can highlight it and CTRL+C
   Paste it into the data table where needed (pos=)
   If you want to manually tweek the values:
       {0,0,0} is the center of the character sheet
       {1,0,0} is right, {-1,0,0} is left
       {0,0,-1} is up, {0,0,1} is down
       0.1 for Y is the height off of the page.
           If it was 0, it would be down inside the model of the sheet

Begin editing below:    ]]

--Set this to true while editing and false when you have finished
disableSave = false
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0,0,0}
--Color information for button background
buttonColor = {1,1,1}
--Change scale of button (Avoid changing if possible)
buildingScale = {0.1,0.1,0.1}

textboxColor = {1,1,1,.5}
textboxFontColor = {0,0,0,255}

incher = 12  -- scaler to adjust for relative position on board to game world inches
buildingScale = 1 -- adjust model scale
--This is the button placement information
defaultRegionData = {
   --Add checkboxes
   regions = {
       --[[
       pos   = the position (pasted from the helper tool)
       size  = height/width/font_size for checkbox
       state = default starting value for checkbox (true=checked, false=not)
       ]]
       --First checkbox
       { -- #1 XP1-20
           pos   = {0,0.1,0},
           size  = 350,
       },
       { -- #2
           pos   = {1,0.1,1},
           size  = 350,
       },
       { -- #3
           pos   = {1,0.1,-1},
           size  = 350,
       },
       { -- #4
           pos   = {-1,0.1,-1},
           size  = 350,
       },
       { -- #5
           pos   = {-1,0.1,1},
           size  = 350,
       },
       { -- #6
           pos   = {-1,0.1,0},
           size  = 350,
       },
       { -- #7
           pos   = {1,0.1,0},
           size  = 350,
       },
       { -- #8
           pos   = {0,0.1,-1},
           size  = 350,
       },
       { -- #9
           pos   = {0,0.1,1},
           size  = 350,
       },
       { -- #10
           pos   = {0,0.1,-.5},
           size  = 350,
        },
       { -- #11
           pos   = {0,0.1,.5},
           size  = 350,
       },
       { -- #12
           pos   = {.5,0.1,0},
           size  = 350,
       },
       { -- #13
           pos   = {-.5,0.1,0},
           size  = 350,
       },
--[[       { -- #14
           pos   = {.4739,0.1,-1.303},
           size  = 350,
       },
       { -- #15
           pos   = {.5842,0.1,-1.303},
           size  = 350,
       },
       { -- #16
           pos   = {.6945,0.1,-1.303},
           size  = 350,
       },
       { -- #17
           pos   = {.8048,0.1,-1.303},
           size  = 350,
      },
       { -- #18
           pos   = {.9151,0.1,-1.303},
           size  = 350,
       },
       { -- #19
           pos   = {1.0254,0.1,-1.303},
           size  = 350,
       },
       { -- #20
           pos   = {1.1357,0.1,-1.303},
           size  = 350,
       }, --]]

       --End of regions
   },
}



--Lua beyond this point, I recommend doing something more fun with your life



--Save function
function updateSave()
   saved_data = JSON.encode(ref_regionData)
   if disableSave==true then saved_data="" end
   self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
 print('Made it.')
   if disableSave==true then saved_data="" end
   if saved_data ~= "" then
       local loaded_data = JSON.decode(saved_data)
       ref_regionData = loaded_data
   else
       ref_regionData = defaultRegionData
   end

   spawnedBuildingCount = 0
   createBuildings()
end

--Building creation

--Makes buildings
function createBuildings()
   for i, data in ipairs(ref_regionData.regions) do
       --Sets up reference function
       --Sets up label
       --Creates button and counts it
       local scaledSize = data.size
       local scaledPos = Vector(data.pos)
       local scalerVec = Vector(incher,10.5,incher)
       scaledPos:scale(scalerVec)
       local tileOffset = self.getPosition()
       local tileRotation = self.getRotation()
       if tileRotation == vector(0,90,0) then
--         scaledPos.setRotationSmooth(vector(0,90,0), false, true)

--         scaledPos.setRotation({0,90,0})
       end
       scaledPos = scaledPos + tileOffset
--        scaledPos[2] = 0.2
      local scaleShifter = 1
      scaleShifterX = 3*buildingScale*(math.random() + 0.25)  -- randomize building size with a minimum size
      scaleShifterY = 6*buildingScale*(math.random() + 0.25)
      scaleShifterZ = 2*buildingScale*(math.random() + 0.25)
      local buildingTintR = math.random(0,255)
      local buildingTintG = math.random(0,255)
      local buildingTintB = math.random(0,255)
      local builtingTint = Color(buildingTintR/255, buildingTintG/255, buildingTintB/255)
       scaledSize = vector(scaleShifterX,scaleShifterY,scaleShifterZ)
       local baseAdjustY = vector(1,scaleShifterY/(buildingScale*6),1)
       scaledPos:scale(baseAdjustY)
       --Creates building and counts it
       local building = spawnObject({
           type='BlockRectangle',
           position=scaledPos,  scale=scaledSize,
           color=buildingTint, rotation = {x=90, y=0, z=0},
       })
--       print('Building '.. spawnedBuildingCount .. ' is ' .. building.getBounds().size.x .. "x" .. building.getbounds().size.y .. "x" .. building.getBounds().size.z .. ' inches.')
       building.setLock(true)
       building.setColorTint(buildingTint)
       spawnedBuildingCount = spawnedBuildingCount + 1
   end
end
