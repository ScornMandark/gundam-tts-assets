--[[ Primary Upper area (162 x 198 scale feet)
image is 2048 x 4096
center is 1024,2048

px UL 448,448 -> -.5625,-.78125
px LR 1600,1856 -> .5625,-0.9375


lower region similar
UL 448	2240	 -> -0.5625,0.09375
LL 1600	3648 ->0.5625,0.78125


13.5" x 16.5", +/- 6.75", 2.25" - 18.75"
--]]

--[[
Map 1 has two big open regions in the middle, top and bottom.  3 ways to fill it -
1: All individual buildings.  3 across and 4 down, ranging in size from ~30 feet to ~50 feet, 2-12 stories.
    The bigger ones will be right against the edge of the zone, so need to account for that.  12 points available, no merging
2: Bigger block chunks.  Maybe 4 quadrants, ~40' x 50'.  Bigger buildings here, 6-20 stories. Intentional merging?
3: Massive complex with small buildings around.  Could take up 120 x 170, with 20' buildings around.  Should be proper massive, minimum 20 stories, up to 100

1: X centers for 3x4 region: -.375, 0, 0.375
  Y Centers for 3x4 Region (top): -0.6953125, -0.5234375, -0.3515625, -0.1796875
  (Bottom X is same as top, bottom Y is inv top)

2: x centers for 2x2 region: -0.1875, 0.1875
  y centers for 2x2 region: -0.552083333, -0.322916667
  (bottom x same as top, bottom y is inv top)

3: X center for 1x1 region: 0
  y center for 1x1 region: -0.4375
  (bottom x same as top, bottom y is inv top)

Access roads/alleys should be available, so maybe some kind of reference chart?

--]]

--Set this to true while editing and false when you have finished
disableSave = false
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0,0,0}
--Color information for button background
buttonColor = {1,1,1}
--Change scale of button (Avoid changing if possible)
buildingScale = {0.1,0.1,0.1}

textboxColor = {1,1,1,.5}
textboxFontColor = {0,0,0,255}

incher = 12  -- scaler to adjust for relative position on board to game world inches
buildingScale = 1 -- adjust model scale
--This is the button placement information
local defaultRegionData = {
   --Add checkboxes
   regions = {
       --[[
       pos   = the position (pasted from the helper tool)
       size  = height/width/font_size for checkbox
       state = default starting value for checkbox (true=checked, false=not)
       ]]
       --First checkbox
       { -- #1 XP1-20
           pos   = {0,0.1,0},
           size  = 350,
       },
       { -- #2
           pos   = {1,0.1,1},
           size  = 350,
       },
       { -- #3
           pos   = {1,0.1,-1},
           size  = 350,
       },
       { -- #4
           pos   = {-1,0.1,-1},
           size  = 350,
       },
       { -- #5
           pos   = {-1,0.1,1},
           size  = 350,
       },
       { -- #6
           pos   = {-1,0.1,0},
           size  = 350,
       },
       { -- #7
           pos   = {1,0.1,0},
           size  = 350,
       },
       { -- #8
           pos   = {0,0.1,-1},
           size  = 350,
       },
       { -- #9
           pos   = {0,0.1,1},
           size  = 350,
       },
       { -- #10
           pos   = {0,0.1,-.5},
           size  = 350,
        },
       { -- #11
           pos   = {0,0.1,.5},
           size  = 350,
       },
       { -- #12
           pos   = {.5,0.1,0},
           size  = 350,
       },
       { -- #13
           pos   = {-.5,0.1,0},
           size  = 350,
       },
--[[       { -- #14
           pos   = {.4739,0.1,-1.303},
           size  = 350,
       },
       { -- #15
           pos   = {.5842,0.1,-1.303},
           size  = 350,
       },
       { -- #16
           pos   = {.6945,0.1,-1.303},
           size  = 350,
       },
       { -- #17
           pos   = {.8048,0.1,-1.303},
           size  = 350,
      },
       { -- #18
           pos   = {.9151,0.1,-1.303},
           size  = 350,
       },
       { -- #19
           pos   = {1.0254,0.1,-1.303},
           size  = 350,
       },
       { -- #20
           pos   = {1.1357,0.1,-1.303},
           size  = 350,
       }, --]]

       --End of regions
   },
}



--Lua beyond this point, I recommend doing something more fun with your life



--Save function
function updateSave()
   saved_data = JSON.encode(ref_regionData)
   if disableSave==true then saved_data="" end
   self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
 print('Made it.')
   if disableSave==true then saved_data="" end
   if saved_data ~= "" then
       local loaded_data = JSON.decode(saved_data)
       ref_regionData = loaded_data
   else
       ref_regionData = defaultRegionData
   end

   spawnedBuildingCount = 0
   local blocktype = {
     [1] = ref_regionData.smallBlock,
     [2] = ref_regionData.medBlock,
     [3] = ref_regionData.largeBlock
   }
   createBuildings()
end

--Building creation

--Makes buildings
function createBuildings()
   for i, data in ipairs(ref_regionData.regions) do
       --Sets up reference function
       --Sets up label
       --Creates button and counts it
--local scaledSize = data.size
local scaledPos = Vector(data.pos)
local scaledPosX = data.pos[1]
local scaledPosY = data.pos[2]
local tileOffset = self.getPosition()
local tileRotation = self.getRotation()
local scaleShifter = 1
scaleShifterX = buildingScale--*(3.333 + 0.8*math.random())  -- randomize building size with a minimum size
scaleShifterY = buildingScale--*(4+4*math.random(0,3))
scaleShifterZ = buildingScale--*(math.random(2,12))
 scaledSize = vector(scaleShifterX,scaleShifterY,scaleShifterZ)
-- print(scaledSize)
local baseAdjustY = vector(1,scaleShifterY/(buildingScale*6),1)
if tileRotation == vector(0,90,0) then
--         scaledPos.setRotationSmooth(vector(0,90,0), false, true)
scaledPos[1] = scaledPosY
scaledPos[2] = scaledPosX
scaledSize = vector(scaleShifterY, scaleShifterX, scaleShifterZ)--scaledPos[1] =
--         scaledPos.setRotation({0,90,0})
--print(scaledSize)
end

scaledPos:scale(vector(incher,10.5,incher))
scaledPos = scaledPos + tileOffset
--        scaledPos[2] = 0.2

scaledPos:scale(baseAdjustY)
       local buildingParams = {
           type='Custom_Assetbundle',
           position=scaledPos,
           scale=scaledSize,
           rotation = {x=90, y=0, z=0},
           sound = false,
            snapToGrid = false,
       }
       local buildingArtParams = {
           assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/kenney_building_comm.unity3d?raw=true',
           assetbundle_secondary = nil,
           type = 1, --[[ figurine --]]
           material = 2, --[[ metal --]]
       }
--       print('Building '.. spawnedBuildingCount .. ' is ' .. building.getBounds().size.x .. "x" .. building.getbounds().size.y .. "x" .. building.getBounds().size.z .. ' inches.')
      local building = spawnObject(buildingParams)
      building.setCustomObject(buildingArtParams)
      local buildRand = math.random(0,18)
      building.AssetBundle.playLoopingEffect(buildRand)
      local function buildingLocker()
        building.setLock(true)
      end
--      Wait.frames(buildingLocker,60)
      local color = getRandomColor()

          -- Apply the color to object
       building.setColorTint(color)
       spawnedBuildingCount = spawnedBuildingCount + 1
       self.addAttachment(building)
   end
end

function getRandomColor()
    local buildingColorTable = {
      [1] = {r=0.6,g=0.25,b=0.25},
      [2] = {r=0.67,g=0.61,b=0.49},
      [3] = {r=0.6,g=0.6,b=0.6},
      [4] = {r=0.55,g=0.688,b=0.723}
    }

    local r = math.random(1,4)
    return Color(buildingColorTable[r])
end
