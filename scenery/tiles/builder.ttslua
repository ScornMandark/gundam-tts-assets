
--Makes buildings
function createBuildings(region)
   local blocktype = {
     [1] = ref_regionData.smallBlock,
     [2] = ref_regionData.medBlock,
     [3] = ref_regionData.largeBlock
   }
   local blockRand = math.random(1,3)
local buildingParams = {
    type='Custom_Assetbundle',
    position= {x=0,y=100,z=0},
    scale= {x=1,y=1,z=1},
    rotation = {x=0, y=0, z=0},
    sound = false,
     snapToGrid = false,
}
local buildingArtParams = {
    assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/kenney_buildings_comm.unity3d?raw=true',
    assetbundle_secondary = nil,
    type = 1, --[[ figurine --]]
    material = 2, --[[ metal --]]
}
local building = spawnObject(buildingParams)
building.setCustomObject(buildingArtParams)

for i, data in ipairs(blocktype[blockRand]) do
       --Sets up reference function
       --Sets up label
       --Creates button and counts it
--local scaledSize = data.size
local scaledPos = Vector(data.pos)
if region == 2 then
scaledPos:scale(vector(1,1,-1))
end
local scaledPosX = data.pos[1]
local scaledPosY = data.pos[2]
local tileOffset = self.getPosition()
local tileRotation = self.getRotation()
local scaleShifter = 1
scaleShifterX = buildingScale--*(3.333 + 0.8*math.random())  -- randomize building size with a minimum size
scaleShifterY = buildingScale--*(4+4*math.random(0,3))
scaleShifterZ = buildingScale--*(math.random(2,12))
 scaledSize = vector(scaleShifterX,scaleShifterY,scaleShifterZ)
-- print(scaledSize)
local baseAdjustY = vector(1,scaleShifterY/(buildingScale*6),1)
if tileRotation == vector(0,90,0) then
--         scaledPos.setRotationSmooth(vector(0,90,0), false, true)
scaledPos[1] = scaledPosY
scaledPos[2] = scaledPosX
scaledSize = vector(scaleShifterY, scaleShifterX, scaleShifterZ)--scaledPos[1] =
--         scaledPos.setRotation({0,90,0})
--print(scaledSize)
end

scaledPos:scale(vector(incher,0,incher))
scaledPos = scaledPos + tileOffset
--        scaledPos[2] = 0.2

--scaledPos:scale(baseAdjustY)

      local cloneBuilding = building.clone()
      cloneBuilding.setPosition(scaledPos)

      local buildRand = math.random(0,18)
      if blocktype[blockRand] == blocktype[1] then
      buildRand = ((math.random(1,2) - 1.5) *2) * math.random(3,9)+9
      end
      if blocktype[blockRand] == blocktype[2] then
      buildRand = math.random(0,12)
      end
      if blocktype[blockRand] == blocktype[3] then
      buildRand = math.random(7,12)
      end

      cloneBuilding.AssetBundle.playLoopingEffect(buildRand)
      local color = getRandomColor()

          -- Apply the color to object
       cloneBuilding.setColorTint(color)
       spawnedBuildingCount = spawnedBuildingCount + 1
       self.addAttachment(cloneBuilding)
   end
      building.destruct()
end


function getRandomColor()
    local buildingColorTable = {
      [1] = {r=0.6,g=0.25,b=0.25},
      [2] = {r=0.67,g=0.61,b=0.49},
      [3] = {r=0.6,g=0.6,b=0.6},
      [4] = {r=0.55,g=0.688,b=0.723}
    }

    local r = math.random(1,4)
    return Color(buildingColorTable[r])
end
