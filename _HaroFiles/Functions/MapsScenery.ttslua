--[[Maps and Scenery]]

function createMaps()
  self.clearButtons()
  self.createButton({click_function = 'tileMaps', function_owner = self, label = 'Randomized Tiles', position = {-3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'matMaps', function_owner = self, label = 'Background Maps', position = {3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'createSelector', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function matMaps()
  self.clearButtons()
  self.createButton({click_function = 'fourByFour', function_owner = self, label = '48 x 48', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'threeByTwo', function_owner = self, label = '36 x 24', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'sixByFour', function_owner = self, label = '72 x 48', position = {1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'sixByFourAlmost', function_owner = self, label = '60 x 44', position = {-1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'createMaps', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function threeByTwo()
  mapSize = 'ThreeByTwo'
  mapX = 36
  mapZ = 24
  environmentSelector()
end

function fourByFour()
  mapSize = 'FourByFour'
  mapX = 48
  mapZ = 48
  environmentSelector()
end

function sixByFour()
  mapSize = 'SixByFour'
  mapX = 72
  mapZ = 48
  environmentSelector()
end

function sixByFourAlmost()
  mapSize = 'SixByFourAlmost'
  mapX = 60
  mapZ = 44
  environmentSelector()
end

function environmentSelector()
  self.clearButtons()
  self.createButton({click_function = 'setDesert', function_owner = self, label = 'Desert', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setCountry', function_owner = self, label = 'Country', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setUrban', function_owner = self, label = 'Urban', position = {-1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setSpace', function_owner = self, label = 'Space', position = {1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function setDesert()
  environmentType = 'Desert'
  TableMaker()
end

function setCountry()
  environmentType = 'Country'
  TableMaker()
end

function setUrban()
  environmentType = 'Urban'
  TableMaker()
end

function setSpace()
  environmentType = 'Space'
  TableMaker()
end

function TableMaker()
  self.clearButtons()
  self.createButton({click_function = 'randomScenery', function_owner = self, label = 'Random Scenery', position = {3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'manualScenery', function_owner = self, label = 'Manual Scenery', position = {-3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
end

function randomScenery()
  sceneryPicker = true
  makeATable()
end

function manualScenery()
  sceneryPicker = false
  makeATable()
end
function makeATable()
  self.clearButtons()
  Tables.setTable("Custom Rectangle")
  Tables.setCustomURL('https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/blank.png')
  TableParams = {
    type = 'Custom_Tile',
    position = {0,0.1,0},
    rotation = {x=0, y=0, z=0},
    scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
    sound = false,
    snap_to_grid = false,
  }
  mapTileParams = {
    image = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/maps/' .. environmentType .. mapSize .. '.png?raw=true',
    type = 0, --[[ sharp corners --]]
    thickness = 0.05, --[[ thin --]]
  }
  local tableMap = spawnObject(TableParams)
  tableMap.setCustomObject(mapTileParams)
  local function mapLocker()
    tableMap.locked = true
--    tableMap.interactable = false
  end
  Wait.frames(mapLocker, 240)
  initializeHaro()
end
function tileMaps()
  self.clearButtons()
   self.createButton({click_function = 'twoByTwoUrbanMapTiles', function_owner = self, label = '4x4 Urban Squares', position = {4.5, 5, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
  self.createButton({click_function = 'threeByTwoUrbanMapTiles', function_owner = self, label = '6x4 Urban Squares', position = {-4.5, 5, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
 self.createButton({click_function = 'createMaps', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function clearSaveTiles()
  self.clearButtons()
  self.createButton({click_function = 'freezeTiles', function_owner = self, label = 'Freeze Tiles', position = {4.5, 6, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
  self.createButton({click_function = 'clearTiles', function_owner = self, label = 'Clear Tiles', position = {-4.5, 6, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
  self.createButton({click_function = 'initializeHaro', function_owner = self, label = 'Done', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function freezeTiles()
  local buildFreezer = 0
  local buildingClear = ''
  local buildingClearScript = 'https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/scenery/tiles/emptyBuildingScript.ttslua'
  WebRequest.get(buildingClearScript, function(request)
    if request.is_error then
      log(request.error)
    else
      buildingClear = request.text
    end
  end)
  local tileClear = ''
  local tileClearScript = 'https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/scenery/tiles/emptyTileScript.ttslua'
  WebRequest.get(tileClearScript, function(request)
    if request.is_error then
      log(request.error)
    else
      tileClear = request.text
    end
  end)
  local function freezyYard()
    for i, object in ipairs(getObjects()) do
      if object.hasTag('mapTile') then
        object.setLuaScript(tileClear)
        object.reload()
      end
    end
    for i, object in ipairs(getObjects()) do
      if object.hasTag('building') then
        object.setLuaScript(buildingClear)
        object.reload()
      end
    end
  end
  Wait.frames(freezyYard,30)
end

function clearTiles()
  if tilesPresent == true then
    for i, object in ipairs(getObjects()) do
      if object.hasTag('mapTile') then
        object.destruct()
      end
    end
    for i, object in ipairs(getObjects()) do
      if object.hasTag('building') then
        object.destruct()
      end
    end
  end
  tilesPresent = false
end


function twoByTwoUrbanMapTiles()
  mapX = 12.685 -- TTS assumes 4000 pixels for scaling, 4096 needs shrunk slightly, and tokens are off from that
  mapZ = 12.685
  makeASquareTiledTable(4)
end
function threeByTwoUrbanMapTiles()
  mapX = 12.685
  mapZ = 12.685
  makeASquareTiledTable(6)
end

function makeASquareTiledTable(tileNum)
  self.clearButtons()
  clearTiles()
  Tables.setTable("Custom Rectangle")
  Tables.setCustomURL('https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/blank.png')
  local seed = os.time()
  math.randomseed(seed)
  print("Random Seed used is " .. seed)

    SquareTileParams = {
      type = 'Custom_Token',
      position = {0,100,0},
      rotation = {x=0, y=0, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }

  mapSquareTileParams = {
    image = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapSquare01.png?raw=true',
    thickness = 0.05,
    merge_distance = 1
  }

    local buildingParams = {
        type='Custom_Assetbundle',
        position= {x=0,y=100,z=0},
        scale= {x=1,y=1,z=1},
        rotation = {x=0, y=0, z=0},
        sound = false,
         snapToGrid = false,
    }
    local buildingArtParams = {
        assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/urban_buildings.unity3d?raw=true',
        assetbundle_secondary = nil,
        type = 1,
        material = 2,
    }
    local building = spawnObject(buildingParams) --preload for cloning
    building.setCustomObject(buildingArtParams)
    building.setLock(true)
    local tileTemplate = spawnObject(SquareTileParams) --preload for cloning
    tileTemplate.setCustomObject(mapSquareTileParams)
    tileTemplate.setLock(true)
   squareLocFourbyFour = {
      [1] = {-12.01,1,-12.01},
      [2] = {-12.01,1,12.01},
      [3] = {12.01,1,-12.01},
      [4] = {12.01,1,12.01},
    }
     squareLocSixbyFour = {
      [1] = {0,1,-12.01},
      [2] = {0,1,12.01},
      [3] = {24.01,1,-12.01},
      [4] = {24.01,1,12.01},
      [5] = {-24.01,1,-12.01},
      [6] = {-24.01,1,12.01},
    }
  local tileCounter = 1
  if tileNum == 4 then
    for i, data in ipairs(squareLocFourbyFour) do
      local squareRand = math.random(1,2)
      local rotRand = math.random(0,3)*90
 --     print(squareLocSixbyFour[tileCounter])
      local function mapLocker()
        local squareBuilder = tileTemplate.clone()
        local squareLocator = squareLocFourbyFour[tileCounter]
--        print(squareLocator)
        squareBuilder.setPosition(squareLocator)
        squareBuilder.setCustomObject({image = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapSquare0' .. squareRand .. '.png?raw=true'})
        squareBuilder.setRotation(vector(0,rotRand,0))
        squareBuilder.locked = true
        squareBuilder.addTag('mapTile')
        tableTiles[tileCounter] = squareBuilder.getGUID()
        generateBuildingsSquare(squareBuilder, squareRand)
        tileCounter = tileCounter +1
      end
      Wait.frames(mapLocker, 120)
    end
     else if tileNum == 6 then
      for i, data in ipairs(squareLocSixbyFour) do
        local squareRand = math.random(1,2)
        local rotRand = math.random(0,3)*90
--        print(squareLocSixbyFour[tileCounter])
        local function mapLocker()
          local squareBuilder = tileTemplate.clone()
          local squareLocator = squareLocSixbyFour[tileCounter]
--          print(squareLocator)
          squareBuilder.setPosition(squareLocator)
          squareBuilder.setCustomObject({image = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapSquare0' .. squareRand .. '.png?raw=true'})
          squareBuilder.setRotation(vector(0,rotRand,0))
          squareBuilder.locked = true
          tableTiles[tileCounter] = squareBuilder.getGUID()
          squareBuilder.addTag('mapTile')
          generateBuildingsSquare(squareBuilder, squareRand)
          tileCounter = tileCounter +1
        end
        Wait.frames(mapLocker, 120)
      end
      end
  end


  local function destroyDummyBuilding()
    building.destruct()
    tileTemplate.destruct()
  end
  Wait.frames(destroyDummyBuilding,300)
  tilesPresent = true

--  generateBuildings(tileNum, rotNum, tileShift, mapRandOne, mapRandTwo, mapRandThree)
  Wait.frames(  clearSaveTiles, 360)
end

function generateBuildingsSquare(tableMap, mapNum)
      local mapRegions = 'https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/scenery/tiles/MapSquare0' .. mapNum .. 'Regions.ttslua'
      local tileSet = ""
      local builderSet = ""
      WebRequest.get(mapRegions, function(request)
        if request.is_error then
          log(request.error)
        else
          tileSet = request.text
        end
        end)
        local builder = 'https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/scenery/tiles/squareBuilder.ttslua'
        WebRequest.get(builder, function(request)
          if request.is_error then
            log(request.error)
          else
            builderSet = request.text
          end
          end)
      local function populate()
        tableMap.setLuaScript(tileSet .. builderSet)
        tableMap.reload()
      end
      Wait.frames(populate, 60)
end

function createScenery()
  self.clearButtons()
  self.createButton({click_function = 'makeATree', function_owner = self, label = 'Tree', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'makeABuilding', function_owner = self, label = 'Building', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'createSelector', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function makeABuilding()
  MSPosAdjustment(MSPosOffset)
  local buildingParams = {
    type='Custom_Assetbundle',
    position = {MSPos.x, MSPos.y, MSPos.z},
    scale= {x=1,y=1,z=1},
    rotation = {x=0, y=0, z=0},
    sound = false,
     snapToGrid = false,
  }
  local buildingArtParams = {
      assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/buildings/kenney_buildings_comm.unity3d?raw=true',
      assetbundle_secondary = nil,
      type = 1, --[[ figurine --]]
      material = 2, --[[ metal --]]
  }
  local building = spawnObject(buildingParams)
  building.setCustomObject(buildingArtParams)
  building.setLock(true)
  building.addTag('mapTile')
  createScenery()
end


function makeATree()
  MSPosAdjustment(MSPosOffset)
  forestParams = {
    type = 'Custom_AssetBundle',
    position = {MSPos.x, MSPos.y, MSPos.z},
    rotation = {x=0, y=0, z=0},
    scale = {baseScaleMod*scaler,1,baseScaleMod*scaler},
    sound = false,
    snap_to_grid = false,
  }
  baseParams = {
    assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/treebase.unity3d?raw=true',
    type = 1, --[[ figurine --]]
    material = 2, --[[ metal --]]
  }
  local forest = spawnObject(forestParams)
  forest.setCustomObject(baseParams)
  forest.locked = true
  local randScale = scaler * (0.75+math.random()/2)
  spawnParams = {
      type = 'Custom_Assetbundle',
      position = {MSPos.x, MSPos.y, MSPos.z},
      rotation = {x=0, y=360 * math.random(), z=0},
      scale = {randScale, randScale, randScale},
      sound = false,
      snap_to_grid = false,
  }
  customParams = {
      assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/trees.unity3d?raw=true',
      type = 1, --[[ figurine --]]
      material = 2, --[[ metal --]]
  }
  local tree = spawnObject(spawnParams)
  tree.setCustomObject(customParams)
  tree.locked = true
  local function treeSetter()
    tree.AssetBundle.playLoopingEffect(math.random(0,16))
  end
  Wait.frames(treeSetter, 60)
  local function treeCloner()
    for xes = 1, 5 do
      for zes = 1, 5 do
        randScale = scaler * (0.75+math.random()/2)
        local treePos = { position = {MSPos.x, MSPos.y+3, MSPos.z}}
        local cloneTreePos = { MSPos.x + (xes - 3 - math.random()/2)*scaler, MSPos.y, MSPos.z + (zes - 3 - math.random()/2)*scaler }
        local treeSpin = {x=0, y=45 * math.random(), z=0}
        local cloneTree = tree.clone(treePos)
        cloneTree.locked = true
        local function treeSpinner()
          cloneTree.AssetBundle.playLoopingEffect(math.random(0,16))
          cloneTree.rotate(treeSpin)
          cloneTree.scale(randScale)
        end
        Wait.frames(treeSpinner, 30)
        local function cloneTreeFixer()
           cloneTree.setPosition(cloneTreePos)
           forest.addAttachment(cloneTree)
        end
         -- if (xes != 3 and zes != 3) then
        Wait.frames(cloneTreeFixer, 30)
         -- end
      end
    end
  end
  Wait.frames(treeCloner, 30)
--  destroyObject(tree)
  local function forestUnlocker()
    forest.addAttachment(tree)
    forest.locked = false
  end
  Wait.frames(forestUnlocker, 60)
  createScenery()
end

