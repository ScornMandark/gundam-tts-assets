--[[Maps and Scenery]]

function createMaps()
  self.clearButtons()
  self.createButton({click_function = 'tileMaps', function_owner = self, label = 'Randomized Tiles', position = {-3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'matMaps', function_owner = self, label = 'Background Maps', position = {3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'createSelector', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function matMaps()
  self.clearButtons()
  self.createButton({click_function = 'fourByFour', function_owner = self, label = '48 x 48', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'threeByTwo', function_owner = self, label = '36 x 24', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'sixByFour', function_owner = self, label = '72 x 48', position = {1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'sixByFourAlmost', function_owner = self, label = '60 x 44', position = {-1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'createMaps', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function threeByTwo()
  mapSize = 'ThreeByTwo'
  mapX = 36
  mapZ = 24
  environmentSelector()
end

function fourByFour()
  mapSize = 'FourByFour'
  mapX = 48
  mapZ = 48
  environmentSelector()
end

function sixByFour()
  mapSize = 'SixByFour'
  mapX = 72
  mapZ = 48
  environmentSelector()
end

function sixByFourAlmost()
  mapSize = 'SixByFourAlmost'
  mapX = 60
  mapZ = 44
  environmentSelector()
end

function environmentSelector()
  self.clearButtons()
  self.createButton({click_function = 'setDesert', function_owner = self, label = 'Desert', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setCountry', function_owner = self, label = 'Country', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setUrban', function_owner = self, label = 'Urban', position = {-1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'setSpace', function_owner = self, label = 'Space', position = {1.5, 5, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function setDesert()
  environmentType = 'Desert'
  TableMaker()
end

function setCountry()
  environmentType = 'Country'
  TableMaker()
end

function setUrban()
  environmentType = 'Urban'
  TableMaker()
end

function setSpace()
  environmentType = 'Space'
  TableMaker()
end

function TableMaker()
  self.clearButtons()
  self.createButton({click_function = 'randomScenery', function_owner = self, label = 'Random Scenery', position = {3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
  self.createButton({click_function = 'manualScenery', function_owner = self, label = 'Manual Scenery', position = {-3, 4, 0},  rotation = {-60, 0, 0}, width=2400, height=400, font_size=250})
end

function randomScenery()
  sceneryPicker = true
  makeATable()
end

function manualScenery()
  sceneryPicker = false
  makeATable()
end

function makeATable()
  self.clearButtons()
  Tables.setTable("Custom Rectangle")
  Tables.setCustomURL('https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/blank.png')
  TableParams = {
    type = 'Custom_Tile',
    position = {0,0.1,0},
    rotation = {x=0, y=0, z=0},
    scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
    sound = false,
    snap_to_grid = false,
  }
  mapTileParams = {
    image = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/maps/' .. environmentType .. mapSize .. '.png?raw=true',
    type = 0, --[[ sharp corners --]]
    thickness = 0.05, --[[ thin --]]
  }
  local tableMap = spawnObject(TableParams)
  tableMap.setCustomObject(mapTileParams)
  local function mapLocker()
    tableMap.locked = true
--    tableMap.interactable = false
  end
  Wait.frames(mapLocker, 240)
  initializeHaro()
end
function tileMaps()
  self.clearButtons()
  self.createButton({click_function = 'twoUrbanMapTiles', function_owner = self, label = '4x4 Urban Tiles', position = {4.5, 6, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
  self.createButton({click_function = 'threeUrbanMapTiles', function_owner = self, label = '6x4 Urban Tiles', position = {-4.5, 6, 0},  rotation = {-60, 0, 0}, width=3000, height=400, font_size=250})
  self.createButton({click_function = 'createMaps', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end
function twoUrbanMapTiles()
  mapX = 17.97 -- TTS assumes 4000 pixels for scaling, 4096 needs shrunk slightly, and tokens are off from that
  mapZ = 17.97
  makeATiledTable(1)
end
function threeUrbanMapTiles()
  mapX = 17.97
  mapZ = 17.97
  makeATiledTable(2)
end
function makeATiledTable(tileNum)
  self.clearButtons()
  Tables.setTable("Custom Rectangle")
  Tables.setCustomURL('https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/blank.png')
  local seed = os.time()
  math.randomseed(seed)
  local tileShift = math.random(0,1)
  local rotNum = math.random(1,10)
  if rotNum >= 6 then
    TableParamsOne = {
      type = 'Custom_Token',
      position = {(tileNum-1)*(-12.01+tileShift*24.02),1,-12.01},
      rotation = {x=0, y=90, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
    TableParamsTwo = {
      type = 'Custom_Token',
      position = {(tileNum-1)*(-12.01+tileShift*24.02),1,12.01},
      rotation = {x=0, y=90, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
    TableParamsThree = {
      type = 'Custom_Token',
      position = {(24.01-tileShift*48.02),1,0},
      rotation = {x=0, y=0, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
  else
    TableParamsOne = {
      type = 'Custom_Token',
      position = {-12.01*tileNum,1,0},
      rotation = {x=0, y=0, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
    TableParamsTwo = {
      type = 'Custom_Token',
      position = {12.01*tileNum,1,0},
      rotation = {x=0, y=0, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
    TableParamsThree = {
      type = 'Custom_Token',
      position = {0,1,0},
      rotation = {x=0, y=0, z=0},
      scale = {baseScaleMod*mapX,1,baseScaleMod*mapZ},
      sound = false,
      snap_to_grid = true,
    }
  end

  local mapRandOne = math.random(1,2)
  local mapRandTwo = math.random(1,2)
  local mapRandThree = math.random(1,2)
  local imageOne = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapTile0' .. mapRandOne .. '.png?raw=true'
  local imageTwo = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapTile0' .. mapRandTwo .. '.png?raw=true'
  local imageThree = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/tiles/MapTile0' .. mapRandThree .. '.png?raw=true'

  mapTileParamsOne = {
    image = imageOne,
    thickness = 0.05, --[[ thin --]]
    merge_distance = 1 --[[ accurate ]]
  }
  mapTileParamsTwo = {
    image = imageTwo,
    thickness = 0.05, --[[ thin --]]
    merge_distance = 1 --[[ accurate ]]
  }
  mapTileParamsThree = {
      image = imageThree,
      thickness = 0.05, --[[ thin --]]
      merge_distance = 1 --[[ accurate ]]
    }
  local tileCounter = 0
  if tileCounter <= tileNum and tileCounter == 0 then
    tileCounter = tileCounter +1
    local tableMapOne = spawnObject(TableParamsOne)
    tableMapOne.setCustomObject(mapTileParamsOne)
    local function mapLockerOne()
      tableMapOne.locked = true
      generateBuildings(tableMapOne, mapRandOne)
    end
    Wait.frames(mapLockerOne, 120)
  end

  if tileCounter <= tileNum and tileCounter == 1 then
    tileCounter = tileCounter +1
    local tableMapTwo = spawnObject(TableParamsTwo)
    tableMapTwo.setCustomObject(mapTileParamsTwo)
    local function mapLockerTwo()
      tableMapTwo.locked = true
      generateBuildings(tableMapTwo, mapRandTwo)
    end
    Wait.frames(mapLockerTwo, 120)
  end

  if tileCounter <= tileNum and tileCounter == 2 then
    tileCounter = tileCounter +1
    local tableMapThree = spawnObject(TableParamsThree)
    tableMapThree.setCustomObject(mapTileParamsThree)
    local function mapLockerThree()
      tableMapThree.locked = true
      generateBuildings(tableMapThree, mapRandThree)
    end
    Wait.frames(mapLockerThree, 120)
  end
--]]
--  generateBuildings(tileNum, rotNum, tileShift, mapRandOne, mapRandTwo, mapRandThree)
end

function generateBuildings(tableMap, mapNum)
      local mapRegions = 'https://raw.githubusercontent.com/ScornMandark/gundam-tts-assets/main/scenery/tiles/MapTile0' .. mapNum .. 'Regions.ttslua'
      WebRequest.get(mapRegions, function(request)
        if request.is_error then
          log(request.error)
        else
          buildingRegions = request.text
        end
        end)
      local function populate()
        tableMap.setLuaScript(buildingRegions)
        tableMap.reload()
      end
      Wait.frames(populate, 120)
  initializeHaro()

end

function createScenery()
  self.clearButtons()
  self.createButton({click_function = 'makeATree', function_owner = self, label = 'Tree', position = {-1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'makeABuilding', function_owner = self, label = 'Building', position = {1.5, 4, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
  self.createButton({click_function = 'createSelector', function_owner = self, label = 'Back', position = {0, 3, 0},  rotation = {-60, 0, 0}, width=1200, height=400, font_size=250})
end

function makeATree()
  MSPosAdjustment(MSPosOffset)
  forestParams = {
    type = 'Custom_AssetBundle',
    position = {MSPos.x, MSPos.y, MSPos.z},
    rotation = {x=0, y=0, z=0},
    scale = {baseScaleMod*scaler,1,baseScaleMod*scaler},
    sound = false,
    snap_to_grid = false,
  }
  baseParams = {
    assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/treebase.unity3d?raw=true',
    type = 1, --[[ figurine --]]
    material = 2, --[[ metal --]]
  }
  local forest = spawnObject(forestParams)
  forest.setCustomObject(baseParams)
  forest.locked = true
  local randScale = scaler * (0.75+math.random()/2)
  spawnParams = {
      type = 'Custom_Assetbundle',
      position = {MSPos.x, MSPos.y, MSPos.z},
      rotation = {x=0, y=360 * math.random(), z=0},
      scale = {randScale, randScale, randScale},
      sound = false,
      snap_to_grid = false,
  }
  customParams = {
      assetbundle = 'https://github.com/ScornMandark/gundam-tts-assets/blob/main/scenery/trees.unity3d?raw=true',
      type = 1, --[[ figurine --]]
      material = 2, --[[ metal --]]
  }
  local tree = spawnObject(spawnParams)
  tree.setCustomObject(customParams)
  tree.locked = true
  local function treeSetter()
    tree.AssetBundle.playLoopingEffect(math.random(0,16))
  end
  Wait.frames(treeSetter, 60)
  local function treeCloner()
    for xes = 1, 5 do
      for zes = 1, 5 do
        randScale = scaler * (0.75+math.random()/2)
        local treePos = { position = {MSPos.x, MSPos.y+3, MSPos.z}}
        local cloneTreePos = { MSPos.x + (xes - 3 - math.random()/2)*scaler, MSPos.y, MSPos.z + (zes - 3 - math.random()/2)*scaler }
        local treeSpin = {x=0, y=45 * math.random(), z=0}
        local cloneTree = tree.clone(treePos)
        cloneTree.locked = true
        local function treeSpinner()
          cloneTree.AssetBundle.playLoopingEffect(math.random(0,16))
          cloneTree.rotate(treeSpin)
          cloneTree.scale(randScale)
        end
        Wait.frames(treeSpinner, 30)
        local function cloneTreeFixer()
           cloneTree.setPosition(cloneTreePos)
           forest.addAttachment(cloneTree)
        end
         -- if (xes != 3 and zes != 3) then
        Wait.frames(cloneTreeFixer, 30)
         -- end
      end
    end
  end
  Wait.frames(treeCloner, 30)
--  destroyObject(tree)
  local function forestUnlocker()
    forest.addAttachment(tree)
    forest.locked = false
  end
  Wait.frames(forestUnlocker, 60)
  createScenery()
end

